/**
 * Created by Andy on 6/6/2015
 * As part of myfitmate
 *
 * Copyright (C) Applicat (www.applicat.co.kr) & Andy Yoon Yong Shin - All Rights Reserved
 * Unauthorized copying of this file, via any medium is strictly prohibited
 * Proprietary and confidential
 * Written by Andy Yoon Yong Shin <andy.shin@applicat.co.kr>, 6/6/2015
 *
 */

/**
 * Created by Andy on 5/26/2015
 * As part of beijingtongclient
 *
 * Copyright (C) Applicat (www.applicat.co.kr) & Andy Yoon Yong Shin - All Rights Reserved
 * Unauthorized copying of this file, via any medium is strictly prohibited
 * Proprietary and confidential
 * Written by Andy Yoon Yong Shin <andy.shin@applicat.co.kr>, 5/26/2015
 *
 */


/*
 *
 * Constant app config
 *
 */


myApp
    .constant("governorUrl", "http://192.168.0.65:1337")
// .constant("appId", 2);
// .constant("googlePushSenderID", "350504486209");
// .constant("kakaoKey", "bdb254de02ea0b7521635ba469608674");
// .constant("facebookKey", "801820753200919");
.constant("appName", "todayNail");

myApp

.factory('Bookings', [

    '$resource', 'governorUrl', '$cordovaFileTransfer',

    function($resource, governorUrl, $cordovaFileTransfer) {

        var bookingUrl = governorUrl + '/booking' + '/:list' +
            '/:image' + '/:mine' + '/:dateBetween';

        var params = {
            list: '@list',
            image: '@image',
            mine: '@mine',
            dateBetween: '@dateBetween'
        };

        var actions = {
            getBookings: {
                method: 'GET',
                params: {
                    list: 'list'
                }
            },
            getMyBookings: {
                method: 'GET',
                params: {
                    list: 'list',
                    mine: 'mine'
                }
            },
            getBookingsDateBetween: {
                method: 'GET',
                params: {
                    list: 'list',
                    dateBetween: 'dateBetween'
                }
            },
            findById: {
                method: 'GET'
            },
            createBooking: {
                method: 'POST'
            },
            updateBooking: {
                method: 'PUT'
            },
            removeBooking: {
                method: 'DELETE'
            }
        };

        var Bookings = $resource(bookingUrl, params, actions);

        //------------------------
        //  CUSTOM NON-HTTP METHODS
        //------------------------
        Bookings.createBookingWithImage = function(parameters, booking) {
            angular.extend(booking, parameters);
            var filePath = booking.file;
            delete booking.file;
            var options = {
                params: booking,
                chunkedMode: false
            };
            return {
                '$promise': $cordovaFileTransfer.upload(governorUrl + '/booking/image', filePath, options)
            };
        };

        Bookings.updateBookingWithImage = function(parameters, booking) {
            angular.extend(booking, parameters);
            var filePath = booking.file;
            delete booking.file;
            var options = {
                params: booking,
                chunkedMode: false,
                httpMethod: 'PUT'
            };
            return {
                '$promise': $cordovaFileTransfer.upload(governorUrl + '/booking/image', filePath, options)
            };

        }

        return Bookings;
    }
]);

// Booking.get({
//     list: 'list',
//     category: 'SHOW-POST'
// }).$promise
//     .then(function success() {}, function err() {})

// Bookings.createBookingWithImage({}, bookingWithFile).$promise
//     .then(function success() {}, function error() {}, function progress(progress) {})

// require id in bookingWithFile sails' req.param('id') not only look at url params but
//also looks at the body of req, it is a sails spcific feature.
// Bookings.createBookingWithImage({}, bookingWithFile).$promise
//     .then(function success() {}, function error() {}, function progress(progress) {})

myApp
    .factory('Comments', [

        '$resource', 'governorUrl',

        function($resource, governorUrl) {

            var commentUrl = governorUrl + '/post/comment';

            var params = {};

            var actions = {
                addCommentToPost: {
                    method: 'POST'
                }
            };

            var Comments = $resource(commentUrl, params, actions)

            return Comments;
        }
    ]);

myApp
    .factory('Message', [

        '$ionicLoading', '$ionicPopup',

        function($ionicLoading, $ionicPopup) {
            var Message = {

                loading: {
                    default: loadingDefault,
                    hide: loadingHide
                },
                message: {
                    success: messageSuccess,
                    error: messageError
                },
                popUp: {
                    alert: {
                        default: popUpAlertDefault
                    }
                }
            };

            return Message;

            function loadingDefault(message) {
                $ionicLoading.show(message);
            }

            function messageSuccess(message) {
                $ionicLoading.show({
                    template: '<h4 class="message-success">' + message + '</h4>',
                    duration: 2000
                });
            }

            function messageError(message) {
                $ionicLoading.show({
                    template: '<h4 class="message-error">' + message + '</h4>',
                    duration: 2000
                });
            }

            function loadingHide() {
                $ionicLoading.hide();
            }

            function popUpAlertDefault(title, message) {
                $ionicPopup.alert({
                    title: title || '인터넷이 끊겼습니다.',
                    template: message || '인터넷을 켜주세요.'
                });
            }


        }
    ]);

myApp
    .factory('Places', [

        '$resource', 'governorUrl', '$cordovaFileTransfer',

        function($resource, governorUrl, $cordovaFileTransfer) {

            var placeUrl = governorUrl + '/place' + '/:list' + '/:mine' +
                '/:within' + '/:image';

            var params = {
                list: '@list',
                mine: '@mine',
                within: '@within',
                image: '@image',
            };

            var actions = {
                getPlaces: {
                    method: 'GET',
                    params: {
                        list: 'list'
                    }
                },
                getMyPlaces: {
                    method: 'GET',
                    params: {
                        list: 'list',
                        mine: 'mine'
                    }
                },
                getPlaceWithin: {
                    method: 'GET',
                    params: {
                        list: 'list',
                        within: 'within'
                    }
                },
                findById: {
                    method: 'GET'
                },
                createPlace: {
                    method: 'POST'
                },
                createPlaceWithImage: {
                    method: 'POST',
                    params: {
                        image: 'image'
                    }
                },
                updatePlace: {
                    method: 'PUT'
                },
                updatePlaceWithImage: {
                    method: 'PUT',
                    params: {
                        image: 'image'
                    }
                },
                removePlace: {
                    method: 'DELETE'
                }
            };

            var Places = $resource(placeUrl, params, actions);

            //------------------------
            //  CUSTOM NON-HTTP METHODS
            //------------------------
            Places.createPlaceWithImage = function(parameters, place) {
                angular.extend(place, parameters);
                var filePath = place.file;
                delete place.file;
                var options = {
                    params: place,
                    chunkedMode: false
                };
                return {
                    '$promise': $cordovaFileTransfer.upload(governorUrl + '/place/image', filePath, options)
                };
            };

            Places.updatePlaceWithImage = function(parameters, place) {
                angular.extend(place, parameters);
                var filePath = place.file;
                delete place.file;
                var options = {
                    params: place,
                    chunkedMode: false,
                    httpMethod: 'PUT'
                };
                return {
                    '$promise': $cordovaFileTransfer.upload(governorUrl + '/place/image', filePath, options)
                };

            }
            return Places;
        }
    ]);

myApp

.factory('Posts', [

    '$resource', 'governorUrl', '$cordovaFileTransfer',

    function($resource, governorUrl, $cordovaFileTransfer) {

        var postUrl = governorUrl + '/post' + '/:list' +
            '/:image' + '/:mine' + '/:like';

        var params = {
            list: '@list',
            image: '@image',
            mine: '@mine',
            like: '@like'
        };

        var actions = {
            getPosts: {
                method: 'GET',
                params: {
                    list: 'list'
                }
            },
            getMyPosts: {
                method: 'GET',
                params: {
                    list: 'list',
                    mine: 'mine'
                }
            },
            findById: {
                method: 'GET'
            },
            createPost: {
                method: 'POST'
            },
            updatePost: {
                method: 'PUT'
            },
            // listPost: {
            //     method: 'PUT',
            //     params: {
            //         like: 'like'
            //     }
            // },
            removePost: {
                method: 'DELETE'
            }
        };

        var Posts = $resource(postUrl, params, actions);

        //------------------------
        //  CUSTOM NON-HTTP METHODS
        //------------------------
        Posts.createPostWithImage = function(parameters, post) {
            angular.extend(post, parameters);
            var filePath = post.file;
            delete post.file;
            var options = {
                params: post,
                chunkedMode: false
            };
            return {
                '$promise': $cordovaFileTransfer.upload(governorUrl + '/post/image', filePath, options)
            };
        };

        Posts.updatePostWithImage = function(parameters, post) {
            angular.extend(post, parameters);
            var filePath = post.file;
            delete post.file;
            var options = {
                params: post,
                chunkedMode: false,
                httpMethod: 'PUT'
            };
            return {
                '$promise': $cordovaFileTransfer.upload(governorUrl + '/post/image', filePath, options)
            };

        }

        return Posts;
    }
]);

// Post.get({
//     list: 'list',
//     category: 'SHOW-POST'
// }).$promise
//     .then(function success() {}, function err() {})

// Posts.createPostWithImage({}, postWithFile).$promise
//     .then(function success() {}, function error() {}, function progress(progress) {})

// require id in postWithFile sails' req.param('id') not only look at url params but
//also looks at the body of req, it is a sails spcific feature.
// Posts.createPostWithImage({}, postWithFile).$promise
//     .then(function success() {}, function error() {}, function progress(progress) {})

myApp

.factory('Products', [

    '$resource', 'governorUrl', '$cordovaFileTransfer',

    function($resource, governorUrl, $cordovaFileTransfer) {

        var productUrl = governorUrl + '/product' + '/:list' +
            '/:image' + '/:mine' + '/:checkProductCode';

        var params = {
            list: '@list',
            image: '@image',
            mine: '@mine',
            checkProductCode: '@checkProductCode'
        };

        var actions = {
            getProducts: {
                method: 'GET',
                params: {
                    list: 'list'
                }
            },
            getMyProducts: {
                method: 'GET',
                params: {
                    list: 'list',
                    mine: 'mine'
                }
            },
            checkProductCode: {
                method: 'GET',
                params: {
                    checkProductCode: 'checkProductCode'
                }
            },
            findById: {
                method: 'GET'
            },
            createProduct: {
                method: 'POST'
            },
            updateProduct: {
                method: 'PUT'
            },
            removeProduct: {
                method: 'DELETE'
            }
        };

        var Products = $resource(productUrl, params, actions);

        //------------------------
        //  CUSTOM NON-HTTP METHODS
        //------------------------
        Products.createProductWithImage = function(parameters, product) {
            angular.extend(product, parameters);
            var filePath = product.file;
            delete product.file;
            var options = {
                params: product,
                chunkedMode: false
            };
            return {
                '$promise': $cordovaFileTransfer.upload(governorUrl + '/product/image', filePath, options)
            };
        };

        Products.updateProductWithImage = function(parameters, product) {
            angular.extend(product, parameters);
            var filePath = product.file;
            delete product.file;
            var options = {
                params: product,
                chunkedMode: false,
                httpMethod: 'PUT'
            };
            return {
                '$promise': $cordovaFileTransfer.upload(governorUrl + '/product/image', filePath, options)
            };

        }

        return Products;
    }
]);

// Product.get({
//     list: 'list',
//     category: 'SHOW-POST'
// }).$promise
//     .then(function success() {}, function err() {})

// Products.createProductWithImage({}, productWithFile).$promise
//     .then(function success() {}, function error() {}, function progress(progress) {})

// require id in productWithFile sails' req.param('id') not only look at url params but
//also looks at the body of req, it is a sails spcific feature.
// Products.createProductWithImage({}, productWithFile).$promise
//     .then(function success() {}, function error() {}, function progress(progress) {})

myApp
    .filter('hourToString', function() {
        return function(hour) {
            var array = String(hour).split('.');
            var hour = array[0]
            var min = array[1]

            if (Number(hour) > 12) {
                hour = hour - 12;
                if (hour < 10) {
                    array[0] = '0' + hour;
                } else {
                    array[0] = String(hour);
                }
            }

            Number(min) === 5 ? array[1] = '30' : array.push('00')

            var str = array.join(':')
            return str;
        }
    })

// Fixes the case where parent veritcal scrolling is disabled on ion-scroll
// element.

// Usage
// ion-scroll[direction="x" scroll-parent]
myApp
    .directive('scrollParent', [

        '$ionicScrollDelegate', '$timeout', '$window',

        function($ionicScrollDelegate, $timeout, $window) {
            return {

                scope: true,
                restrict: 'A',
                compile: function(element, attr) {

                    if (!$window.horizontalIonScrollCount) {
                        $window.horizontalIonScrollCount = 0;
                    }

                    $window.horizontalIonScrollCount++
                    attr.delegateHandle = "horizontal" + $window.horizontalIonScrollCount;

                    return function(scope, element, attr) {
                        $timeout(function() {
                            var horizontal = attr.delegateHandle;
                            var sv = $ionicScrollDelegate.$getByHandle(horizontal).getScrollView();

                            var container = sv.__container;

                            var originaltouchStart = sv.touchStart;
                            var originalmouseDown = sv.mouseDown;
                            var originaltouchMove = sv.touchMove;
                            var originalmouseMove = sv.mouseMove;

                            container.removeEventListener('touchstart', sv.touchStart);
                            container.removeEventListener('mousedown', sv.mouseDown);
                            document.removeEventListener('touchmove', sv.touchMove);
                            document.removeEventListener('mousemove', sv.mousemove);


                            sv.touchStart = function(e) {
                                e.preventDefault = function() {}
                                originaltouchStart.apply(sv, [e]);
                            }

                            sv.touchMove = function(e) {
                                e.preventDefault = function() {}
                                originaltouchMove.apply(sv, [e]);
                            }

                            sv.mouseDown = function(e) {
                                e.preventDefault = function() {}

                                if (originalmouseDown) {
                                    originalmouseDown.apply(sv, [e]);
                                }

                            }


                            sv.mouseMove = function(e) {
                                e.preventDefault = function() {}

                                if (originalmouseMove) {
                                    originalmouseMove.apply(sv, [e]);
                                }

                            }

                            container.addEventListener("touchstart", sv.touchStart, false);
                            container.addEventListener("mousedown", sv.mouseDown, false);
                            document.addEventListener("touchmove", sv.touchMove, false);
                            document.addEventListener("mousemove", sv.mouseMove, false);
                        })

                    }
                }
            }
        }
    ]);

//==========================================================================
//              Style for user selection.
//==========================================================================
myApp

.directive('touch', function() {
    return {
        restrict: 'A',
        link: function(scope, element, attrs) {
            element.on('touchstart', function(e) {
                element.css({
                    opacity: 0.5,
                })
                    .addClass('touchBackground');

            })
            element.on('touchend', function(e) {
                element.css({
                    opacity: 1
                })
                    .removeClass('touchBackground');
            })
        }
    }
})

// Deprecated: styling selected state should be styled by using ng-class
//and and changing the underlying model of the view
.directive('choose', function() {
    return {
        restrict: 'AC',
        link: function(scope, element, attrs) {
            scope.$on('unselect', function() {
                element.removeClass('selected')
            })
            element.on('touchend', function() {
                if (element.hasClass('selected') && attrs.toggle) {
                    element.parent().children().removeClass('selected')
                } else {
                    element.parent().children().removeClass('selected')
                    element.addClass('selected');
                }
            })
        }
    }
})

// Deprecated: styling selected state should be styled by using ng-class
//and and changing the underlying model of the view
.directive('toggle', function() {
    return {
        restrict: 'A',
        link: function(scope, element, attrs) {
            element.on('touchend', function() {
                if (element.hasClass('selected')) {
                    element.removeClass('selected');
                } else {
                    element.addClass('selected');
                }
            })
        }
    }
})

// Deprecated: styling selected state should be styled by using ng-class
//and and changing the underlying model of the view
.directive('toggleOnEmit', function() {
    return {
        restrict: 'AC',
        link: function(scope, element, attrs) {
            if (attrs.toggleOnEmit) {
                scope.$on(attrs.toggleOnEmit, function() {
                    if (element.hasClass('selected')) {
                        element.removeClass('selected')
                    } else {
                        element.addClass('selected')
                    }
                });
            }
        }
    }
})

// Deprecated: styling selected state should be styled by using ng-class
//and and changing the underlying model of the view
.directive('default', function() {
    return {
        restrict: 'AC',
        link: function(scope, element, attrs) {
            if (attrs.default === '') {
                scope.$on('default', function() {
                    element.parent().children().removeClass('selected');
                    element.addClass('selected');
                })
            }
        }
    }
})

//// FAILED MATERIAL DESIGN ATTEMPTED.
// .directive('touched', function () {
//  return {
//      restrict: 'A',
//      link: function(scope, element, attrs) {

//          var parent, ink, d, x, y;

//          element.on('touchstart', function (event){
//              element.css({
//                  overflow: 'hidden',
//                  opacity:'0.5',
//              })
//              .addClass('relative');

//              if(element.find('ink').length === 0){
//                  element.prepend('<ink></ink>');
//              }
//              var ink = element.find('ink');
//              ink.removeClass('animate');
//              if(!ink.prop('offsetHeight') && !ink.prop('offsetWidth')){
//                  d =Math.max(element.prop('offsetWidth'),
//                      element.prop('offsetHeight')
//                  );
//                  ink.css({height: d + "px", width: d + "px"});
//              }
//              x = event.layerX - ink.prop('offsetWidth')/2;
//              y = event.layerY - ink.prop('offsetHeight')/2;
//              ink.css({top: y + 'px', left: x + 'px'}).addClass('animate');
//          });

//          element.on('touchend', function (event){
//              element.css({
//                  opacity: 1
//              })
//          })
//      }
//  };
// })

// Makes width of the view available as JS or directive such as collection repeat
// This makes collection repeat to have dynamic width or height which depends on
//the view width or view height;

// usage:
// Required: IndexModel.vw = INT;
// In index.html, body[vw]
// 1) ion-list>ion-item[collection-repeat="item in items" item-height="vw * 0.20"]
// 2) ANY[vw]
// 3) function controller(IndexModel){
//     console.log(IndexModel.vw);
//    }
myApp
    .directive('vw', [
        '$rootScope', '$window',
        function($rootScope, $window) {
            return {
                link: function(scope, element, attrs) {

                    $rootScope.vw = element.prop('offsetWidth');

                    $window.addEventListener('resize', function() {
                        $rootScope.$apply(function() {
                            $rootScope.vw = element.prop('offsetWidth');
                        });
                    });
                }
            }
        }
    ]);

myApp
    .controller('AnnouncementsController', [

        '$state',

        function($state) {

            var Announcements = this;

            Announcements.goToEventListHandler = function() {
                $state.go('main.announcements.eventList')
            }
            Announcements.goToNoticeListHandler = function() {
                $state.go('main.announcements.noticeList')
            }

        }
    ]);

myApp
    .factory('AnnouncementsModel', [



        function() {
            var AnnouncementsModel = {

            };

            return AnnoucementsModel;

        }
    ]);

myApp
.controller('CancelController', [



function (){
    
}]);


myApp
.factory('CancelModel', [



function(){
    
}]);
myApp
.controller('BalanceController', [



function (){
    
}]);


myApp
.factory('BalanceModel', [



function(){
    
}]);
myApp
    .controller('DetailController', [

        'DetailModel', '$stateParams', '$scope', '$ionicLoading',
        '$ionicPopup', '$ionicHistory', '$filter',

        function(DetailModel, $stateParams, $scope, $ionicLoading,
            $ionicPopup, $ionicHistory, $filter
        ) {
            var Detail = this;


            $scope.$on('$ionicView.enter', function() {

                $ionicLoading.show({
                    template: '네일샵 가져오는중...'
                });

                DetailModel.queryById($stateParams.id)
                    .then(function success(response) {

                        angular.copy(response, DetailModel.currentPlace);

                        Detail.currentPlace = DetailModel.currentPlace;

                        $ionicLoading.hide();

                        Detail.currentPlace.portfolioPhotos =
                            getPhotosByType(Detail.currentPlace.photos);

                        console.log(Detail.currentPlace.portfolioPhotos);

                    }, function error(err) {
                        errorHandler();
                    });
            });


            //==========================================================================
            //              DATE PICKER
            //==========================================================================
            // DatePicker's UTChours is set to 3 when date object is obtained
            Detail.date = new Date().setUTCHours(3);

            // Got from datepicker.bootstrap
            // Detail.dater = DetailModel.selectedDate;







            //==========================================================================
            //              HELPER FUNCTIONS
            //==========================================================================

            function errorHandler() {
                $ionicLoading.hide();
                $ionicPopup.alert({
                    title: '서버와 연결 실패',
                    template: '인터넷을 켜주시기 바랍니다.'
                }).then(function(res) {
                    $ionicHistory.goBack();
                });
            }

            function getPhotosByType(photos) {
                var results = [];
                photos.forEach(function(photo, i, photos) {
                    if (photo.resource_type === 'portfolio') {
                        results.push(photo);
                    }
                });
                console.log(results);
                return results;
            }
        }
    ]);

myApp
    .factory('DetailModel', [

        '$q', '$state', '$stateParams',

        function($q, $state, $stateParams) {

            var DetailModel = {

                currentPlace: {
                    // shop properties from response of queryById
                },

                selectedDate: {
                    // dt from datepickeruibootstrap
                    current: 'BOOL',
                    customClass: 'STRING',
                    date: 'DATE',
                    disabled: 'BOOL',
                },
                //Coupled with ui-BootStrap.datePicker and
                //DetailModel.selectedDate
                dayClickHandler: function(dt) {
                    var shopId = $stateParams.id;
                    //TODO: setUTCHours(0)
                    var selectedDay = moment.utc(dt.date)
                        .set({
                            hour: 0,
                            minute: 0,
                            second: 0
                        })
                        .format('YYYY-MM-DD')
                    var bookings = DetailModel.currentPlace.bookings;

                    // Parameters needed to requery a shop detail
                    //as things might have changed since shop details.
                    $state.go('main.schedule', {
                        id: shopId,
                        dateTime: moment.utc(selectedDay)
                    })
                },









                //==========================================================================
                //              SERVER
                //==========================================================================
                // idParams = {
                //     id: INTEGER  or whatever...
                // }
                queryById: function(idParams) {

                    var MOCK = true;

                    if (!MOCK) {

                        var deferred = $q.defer();
                        $http({
                            url: governorUrl + '/place',
                            method: 'GET',
                            params: idParams,
                            headers: {
                                'Content-Type': 'application/json'
                            }
                        })
                            .success(function(data) {
                                deferred.resolve(data);
                            })
                            .error(function(data) {
                                deferred.reject(data);
                            });

                        return deferred.promise;
                    }
                    //// MOCK START ///
                    else {
                        var deferred = $q.defer();

                        var response = {
                            id: 0,
                            category: 'shop',
                            employee: 3,

                            name: '네일샵 101',
                            photos: [{
                                url: 'img/800/02_main/main01.png',
                                resource_type: 'portfolio'
                            }, {
                                url: 'img/800/02_main/main02.png',
                                resource_type: 'portfolio'
                            }, {
                                url: 'img/800/02_main/main03.png',
                                resource_type: 'portfolio'
                            }],
                            hours: [10, 21],
                            phone: '010010010',
                            address: '강남구 101-101',
                            services: [{
                                name: '기본',
                                price: 15000,
                                duration: 0.5
                            }, {
                                name: '젤 원컬러',
                                price: 17000,
                                duration: 1.5
                            }, {
                                name: '젤 투컬러',
                                price: 20000,
                                duration: 2
                            }],
                            bookings: [{
                                dateTime: new Date(),
                                products: [{
                                    name: '기본',
                                    price: 14000,
                                    duration: 1.5
                                }],
                                duration: 1.5
                            }],


                            latitude: 37.5691469,
                            longitude: 126.978647,
                            description: '네일샵에 오신것을 환영합니다 101'
                        };

                        deferred.resolve(response);
                        return deferred.promise;
                    } /// MOCK END ////
                } /// queryById END ///
            };


            return DetailModel;

        }
    ]);

myApp
.controller('DaumMapController', [

'DaumMapModel', '$ionicModal', '$scope', '$state', '$ionicLoading',
    
function (DaumMapModel, $ionicModal, $scope, $state, $ionicLoading){

    var Map = this;

    Map.findMeThenSearchNearBy = function (){
        return DaumMapModel.findMeThenSearchNearBy();
    };

    Map.searchLocationNearBy = function (value){
        return DaumMapModel.searchLocationNearBy(value);
    };

    Map.goToDetailHandler = function (){
        Map.modal.remove();
        $state.go('main.detail', {id: DaumMapModel.selectedPlace.id});
    };

    // Make currently selected place from DaumMapDirective available at ModalView
    Map.selectedPlace = DaumMapModel.selectedPlace;

    $scope.$on('$ionicView.afterEnter', function (){
        // Set Modal
        $ionicModal.fromTemplateUrl( 'state/daumMap/placeModal.html', {
            scope: $scope,
            animation: 'slide-in-up'
        })
        .then(function (modal){
            DaumMapModel.modal = modal;
            Map.modal = DaumMapModel.modal;
        })
    });


}])
myApp
    .directive('daumMap', [

        'DaumMapModel', '$ionicLoading', '$state', '$ionicPopup',

        function(DaumMapModel, $ionicLoading, $state, $ionicPopup) {
            return {
                scope: {
                    markerSrc: '@',
                    markerClickedSrc: '@',
                    markerWidth: '@',
                    markerHeight: '@',
                },
                link: function(scope, element, attr) {
                    //==========================================================================
                    //              Global Map Property
                    //==========================================================================
                    // Initiate map
                    var DOM = element[0];
                    var mapOptions = {
                        center: new daum.maps.LatLng(37.5691469, 126.978647),
                        level: 4,
                        draggable: true
                    };
                    var map = new daum.maps.Map(DOM, mapOptions);
                    // place service
                    var ps = new daum.maps.services.Places();
                    // Marker style properties.
                    var markerSize = new daum.maps.Size(scope.markerWidth, scope.markerHeight);
                    var markerImg = new daum.maps.MarkerImage(scope.markerSrc, markerSize);
                    var markerClickedImg = new daum.maps.MarkerImage(scope.markerClickedSrc, markerSize);
                    //==========================================================================
                    //              HELPER FUNCTIONS
                    //==========================================================================
                    // Calc nearby locations within a category function
                    var calcNearBy = function(lat, lng, category) {
                        var minLat = lat - 0.3;
                        var maxLat = lat + 0.3;
                        var minLng = lng - 0.6;
                        var maxLng = lng + 0.6;
                        var params = {
                            category: category,
                            minLat: minLat,
                            maxLat: maxLat,
                            minLng: minLng,
                            maxLng: maxLng
                        };
                        return params;
                    };
                    // Draw Markers after query
                    var drawMarkers = function(searchParams) {
                        // Reset previous markers;
                        angular.forEach(DaumMapModel.markers, function(marker, i, self) {
                            marker.setMap(null);
                            // delete self[i];
                        });
                        DaumMapModel.markers = []
                        // angular.copy([], DaumMapModel.markers)
                        // Get places
                        DaumMapModel.queryNearBy(searchParams)
                            .then(function success(response) {
                                // Save and draw nearby places with category
                                angular.copy(response.places, DaumMapModel.places);
                                angular.forEach(DaumMapModel.places, function(place, i, self) {
                                    var position = new daum.maps.LatLng(place.latitude, place.longitude);
                                    var marker = new daum.maps.Marker({
                                        map: map,
                                        position: position,
                                        title: String(i),
                                        image: markerImg,
                                        clickable: true
                                    });
                                    daum.maps.event.addListener(marker, 'click', function() {
                                        var marker = this;
                                        scope.$apply(function() {
                                            // change rest img to unselected.
                                            angular.forEach(DaumMapModel.markers, function(marker, i, self) {
                                                marker.setImage(markerImg);
                                            });
                                            // change this marker to selected.
                                            marker.setImage(markerClickedImg);
                                            // show modal for clicked marker
                                            DaumMapModel.modal.show();
                                            // load content based on location of the array
                                            var index = Number(marker.getTitle());
                                            angular.copy(DaumMapModel.places[index], DaumMapModel.selectedPlace);
                                        });
                                    });
                                    // Save converted place with click event added.
                                    DaumMapModel.markers.push(marker);
                                });
                            }, function error(err) {
                                console.log(err);
                            });
                    };
                    //==========================================================================
                    //              Find Current location and search nearby
                    //==========================================================================
                    DaumMapModel.findMeThenSearchNearBy = function() {
                        $ionicLoading.show({
                            template: '<ion-spinner></ion-spinner>'
                        })
                        navigator.geolocation.getCurrentPosition(function(position) {

                            if (position.coords == null) {
                                $ionicLoading.hide();
                                $ionicPopup.alert({
                                    title: '위치 공유가 꺼져있습니다.',
                                    template: '위치 공유가 켜주세요.'
                                })
                                return false;
                            }
                            var result = {
                                latitude: position.coords.latitude,
                                longitude: position.coords.longitude
                            };
                            console.log(result);

                            angular.copy(result, DaumMapModel.currentPosition);

                            map.setCenter(new daum.maps.LatLng(
                                DaumMapModel.currentPosition.latitude,
                                DaumMapModel.currentPosition.longitude
                            ));

                            var searchParams = calcNearBy(
                                DaumMapModel.currentPosition.latitude,
                                DaumMapModel.currentPosition.longitude,
                                DaumMapModel.category
                            );

                            drawMarkers(searchParams);
                            $ionicLoading.hide();
                        });
                    };
                    //==========================================================================
                    //              Find specific location with value and search nearby
                    //==========================================================================
                    DaumMapModel.searchLocationNearBy = function(value) {
                        $ionicLoading.show({
                            template: '<ion-spinner></ion-spinner>'
                        });
                        ps.keywordSearch(value, function(status, data, pagination) {
                            // Center the map to the first result of the search
                            var category = DaumMapModel.category;

                            if (data.places[0] === undefined) {
                                $ionicLoading.hide();
                                $ionicPopup.alert({
                                    title: '요청하신 장소가 없습니다',
                                    template: '다시검색해주세요'
                                })
                                return false;
                            }
                            map.panTo(new daum.maps.LatLng(
                                data.places[0].latitude,
                                data.places[0].longitude
                            ));
                            var searchParams = calcNearBy(
                                data.places[0].latitude,
                                data.places[0].longitude,
                                category
                            );
                            drawMarkers(searchParams);
                            $ionicLoading.hide();
                        });
                    };
                }
            };

        }
    ]);

myApp
    .factory('DaumMapModel', [

        '$http', '$q', 'governorUrl',

        function($http, $q, governorUrl) {
            var DaumMapModel = {
                // need to specify category for search
                category: 'NAIL-PLACE', // only one category hence fixed
                currentPosition: {
                    latitude: 'FLOAT',
                    longitude: 'FLOAT'
                },
                markers: [],
                places: [],
                selectedPlace: {
                    // response.places[n] selected from DaumMapDirective
                },
                modal: {
                    //Defined in DaumMapController
                },
                findMeThenSearchNearBy: function() {
                    //Defined in DaumMapDirective
                },
                searchLocationNearBy: function() {
                    //Defined in DaumMapDirective
                },
                //==========================================================================
                //              Server
                //==========================================================================
                // searchParams = {
                //     category: 'shop',
                //     minLat: FLOAT,
                //     maxLat: FLOAT,
                //     minLng: FLOAT,
                //     maxLng: FLOAT
                // }
                queryNearBy: function(searchParams) {

                    var MOCK = true;

                    if (!MOCK) {

                        var deferred = $q.defer();
                        $http({
                            url: governorUrl + '/club/Near',
                            method: 'GET',
                            params: searchParams,
                            headers: {
                                'Content-Type': 'application/json'
                            }
                        })
                            .success(function(data) {
                                deferred.resolve(data);
                            })
                            .error(function(data) {
                                deferred.reject(data);
                            });

                        return deferred.promise;

                    }
                    //// MOCK START ///
                    else {
                        var deferred = $q.defer();
                        var response = {
                            places: [{
                                id: 0,
                                name: '네일샵 101',
                                category: 'shop',
                                photos: [{
                                    url: ''
                                }, {
                                    url: ''
                                }, {
                                    url: ''
                                }],
                                phone: 010010010,
                                address: '강남구 101-101',
                                latitude: 37.5691469,
                                longitude: 126.978647,
                                description: '네일샵에 오신것을 환영합니다 101'

                            }, {
                                id: 1,
                                name: '네일샵 202',
                                category: 'shop',
                                photos: [{
                                    url: ''
                                }, {
                                    url: ''
                                }, {
                                    url: ''
                                }],
                                phone: 010010010,
                                address: '강남구 101-101',
                                latitude: 37.4857489,
                                longitude: 126.9941898,
                                description: '네일샵에 오신것을 환영합니다 202'
                            }, {
                                name: '네일샵 103',
                                latitude: 37.5057489,
                                longitude: 127.1941898
                            }, {
                                name: '네일샵 104',
                                latitude: 37.2857489,
                                longitude: 126.7941898
                            }]
                        }
                        deferred.resolve(response);
                        return deferred.promise;
                    }
                    ///// MOCK END ////
                }

            };

            return DaumMapModel;
        }
    ])

myApp
.controller('FavoriteController', [



function (){
    
}]);


myApp
.factory('FavoriteModel', [



function(){
    
}]);
myApp
.controller('ListController', [

'ListModel', '$state', '$scope', '$timeout',

function (ListModel, $state, $scope, $timeout){
    var List = this;

    // Link model to view;
    List.lists = ListModel.lists;

    // Go to details of the clicked item;
    List.itemHandler = function (item){
        angular.copy(item, ListModel.currentItem);
        $state.go('main.detail', {id: item.id});
        console.log(item);
    };

    // Check for newer stuff
    List.doRefresh = function (){
        //http.get new stuff
        function final(){
            $scope.$broadcast('scroll.refreshComplete');
        }
    }   

    // Check for older stuff;
    List.getData = function (){
        // http.get old stuff
        console.log('testing');
        function final(response){
            if(response.posts.length === 10){
                ListModel.moreData = true;
            } else {
                ListModel.moreData = false;
            }
            $scope.$broadcast('scroll.infiniteScrollComplete');
        }
    };

    // Check if there is more data;
    List.checkForMore = function (){
        return ListModel.moreData;
    };
}]);
myApp
.factory('ListModel', [

function (){
    var ListModel = {
        lists: [
            {
                id: 0,
                title: 'This is list 0',
                content: 'This is the content'
            },
            {
                id: 1,
                title: 'This is list 1',
                content: 'This is the content of list 1'
            },
            {
                id: 2,
                title: 'This is list 2',
                content: 'This is the content of list 2'
            }
        ],
        currentItem: {},
        moreData: false 
    };

    return ListModel;
}]);
myApp
.controller('LoginController', [



function (){






    

}]);
myApp
.factory('LoginModel', [



function (){

}]);
myApp
    .controller('MainController', [

        '$ionicSideMenuDelegate', 'MainModel', '$state', '$timeout',
        '$ionicNavBarDelegate',

        function($ionicSideMenuDelegate, MainModel, $state, $timeout,
            $ionicNavBarDelegate
        ) {

            var Main = this;

            Main.toggleSideMenu = function() {
                $ionicSideMenuDelegate.toggleLeft();
            }

            Main.sideMenuLists = MainModel.sideMenuLists;

            Main.menuSelectHandler = function(state) {
                $state.go(state)
                $ionicSideMenuDelegate.toggleLeft(false);
            }

            Main.settingMenuHandler = function() {
                Main.settingSubMenu = !Main.settingSubMenu;
            }

            // END
        }
    ]);

myApp
    .factory('MainModel', [

        function() {
            var MainModel = {
                sideMenuLists: [{
                    state: 'main.home',
                    text: '홈으로 가기'
                }, {
                    state: 'main.show.savedList',
                    text: '담아온 것 모아보기'
                }, {
                    state: 'main.balance.list',
                    text: '적립금 확인'
                }, {
                    state: 'main.cancel',
                    text: '예약 변경 및 취소'
                }, {
                    state: 'main.announcements.eventList',
                    text: '이벤트 / 공지사항'
                }]
            };

            return MainModel;
        }
    ])

myApp
    .controller('MainHomeController', [
        'MainHomeModel', '$state',
        function(MainHomeModel, $state) {

            var Home = this;

            Home.search = ''

            Home.searchHandler = function(search) {

            }

            Home.goToHandler = function(state) {
                $state.go(state);
            }



        }
    ])

myApp
.factory('MainHomeModel', [

function(){

    var MainHomeModel = {

    };
    return MainHomeModel;
}])
myApp
    .controller('ScheduleController', [

        'DetailModel', 'ScheduleModel', '$ionicLoading',
        '$scope', '$ionicModal', '$ionicPopup', '$q',

        function(DetailModel, ScheduleModel, $ionicLoading,
            $scope, $ionicModal, $ionicPopup, $q) {

            var Schedule = this;
            //==========================================================================
            //              List View
            //==========================================================================
            var UserModel = {
                username: 'TODO'
            }

            var hours = DetailModel.currentPlace.hours;
            var viewSlots = _.range(hours[0], hours[1], 0.5);
            var schedules = DetailModel.selectedDate.schedules;
            var viewSlots = _.map(viewSlots, function(hour, i, viewSlots) {
                    var obj = {};
                    // hour intervum
                    obj.hour = hour;
                    schedules.forEach(function(objVal, i, schedules) {
                        if (objVal.time == hour) {
                            // booked time
                            obj.time = objVal.time;
                            obj.fullyBooked = objVal.fullyBooked;
                        }
                    })
                    //obj = {hour, time, fullyBooked}
                    return obj;
                })
                // [{hour, time, fullyBooked}]
            Schedule.viewSlots = viewSlots;
            Schedule.reserveModel = {};
            Schedule.itemHandler = function(itemObj) {
                Schedule.reserveModel.time = itemObj.hour;
                Schedule.reserveModel.services = DetailModel.currentPlace.services;
                Schedule.reserveModel.username = UserModel.username;
                Schedule.reserveModel.id = DetailModel.currentPlace.id;
                Schedule.modal.show();
            };

            // Schedule.reserveModel = {
            //     time: Schedule.clickedTime,
            //     services: DetailModel.currentPlace.services,
            //     username: UserModel.username
            // };

            Schedule.selectedService = {
                name: null,
                price: null,
                duration: null,
                username: null,
                // user input to check
                realname: null,
                userPhone: null
            };

            Schedule.doReserve = function() {

                Schedule.selectedService.username = UserModel.username;
                console.log(Schedule.selectedService)

                // Validation
                if (Schedule.selectedService.duration == null) {
                    return reserveErrorHelper('서비스란');
                } else if (Schedule.selectedService.realname == null) {
                    return reserveErrorHelper('이름란');
                } else if (Schedule.selectedService.userPhone == null) {
                    return reserveErrorHelper('연락처란');
                }

                // Request shop by id
                ScheduleModel.queryById({
                    id: DetailModel.currentPlace.id
                })
                // Update DetailModel.currentPlace
                .then(function success(response) {
                    angular.copy(response, DetailModel.currentPlace);
                    console.log(DetailModel.currentPlace);
                    // Find a object that matches clicked time
                    for (var i = 0; i < DetailModel.currentPlace.schedules.length; i++) {
                        var bookDateObj = DetailModel.currentPlace.schedules[i];
                        if (Schedule.reserveModel.date == bookDateObj.date) {
                            // if employee > bookedServices.length
                            if (DetailModel.currentPlace.employee > bookDateObj.bookedServices.length) {
                                // update bookedServices array in the server.
                                ScheduleModel.updateSchedule(Schedule.selectedService, {
                                    id: DetailModel.currentPlace.id,
                                    time: Schedule.reserveModel.time
                                })
                                // if update was successful;
                                .then(function success(response) {
                                    // update bookedServices array in currentPlace
                                    bookDateObj.bookedServices.push(Schedule.selectedService)
                                    console.log(DetailModel.currentPlace);
                                    // close modal
                                    closeModal(Schedule.modal);
                                }, function err(error) {
                                    // else something went wrong message.
                                    console.dir(error);
                                    console.log('Someone just tookt that place')
                                    // close modal
                                    closeModal(Schedule.modal);
                                })
                            }
                        }
                    }
                }, function err(error) {
                    // else send someone just took that place error message.
                    console.dir(error);
                    console.log('Server down.')
                    // close modal
                    closeModal(Schedule.modal);
                })
            };



            //==========================================================================
            //              On AfterEnter.
            //==========================================================================
            $scope.$on('$ionicView.afterEnter', function() {
                // Set Modal
                $ionicModal.fromTemplateUrl('state/schedule/reserveModal.html', {
                    scope: $scope,
                    animation: 'slide-in-up'
                })
                    .then(function(modal) {
                        Schedule.modal = modal;
                    })
            });

            //==========================================================================
            //              Check reserve inputs
            //==========================================================================
            function reserveErrorHelper(korean) {
                $ionicPopup.alert({
                    title: korean + '이 비었습니다.',
                    template: korean + '을 입력해주세요.'
                });
            }

            function closeModal(modal) {
                Schedule.selectedService.realname = null;
                Schedule.selectedService.userPhone = null;
                modal.hide();
            }




        }
    ])

myApp
.factory('ScheduleModel', [

'$q',

function ($q){
    
    var ScheduleModel = {
//==========================================================================
//              Server update schedule array
//==========================================================================
            // bookObj= {
            //     name: '원톤 베이직',
            //     price: 19000,
            //     duration: 2.5,
            //     username: '개나리',
            //     realname: '홍길동',
            //     userPhone: 01011112222
            // };
            // 
            // params = {id: 1, time: 12.5};
        updateSchedule: function (bookObj, params){

            var MOCK = true;

            if (!MOCK) {

                var deferred = $q.defer();
                $http({
                    url:  governorUrl + '/place',
                    method: 'POST',
                    data: bookObj,
                    params: params,
                    headers: {'Content-Type': 'application/json'}
                })
                .success(function (data) {
                    deferred.resolve(data);
                })
                .error(function (data) {
                    deferred.reject(data);
                });

                return deferred.promise;

            } 
            //// MOCK START ///
            else {
                var deferred = $q.defer();
                var response = {





                }
                deferred.resolve(response);
                return deferred.promise;
            }/// MOCK END ////
        },/// updateSchedule END ///


        // idParams = {
        //     id: INTEGER  or whatever...
        // }
        queryById: function (idParams){

            var MOCK = true;

            if (!MOCK) {

                var deferred = $q.defer();
                $http({
                    url:  governorUrl + '/place',
                    method: 'GET',
                    params: idParams,
                    headers: {'Content-Type': 'application/json'}
                })
                .success(function (data) {
                    deferred.resolve(data);
                })
                .error(function (data) {
                    deferred.reject(data);
                });

                return deferred.promise;
            } 
            //// MOCK START ///
            else {
                var deferred = $q.defer();

                var response = {
                    id: 0,
                    category: 'shop',
                    employee: 4,

                    name: '네일샵 101',
                    photos: [
                        {url: 'img/800/02_main/main01.png'},
                        {url: 'img/800/02_main/main02.png'},
                        {url: 'img/800/02_main/main03.png'}
                    ],
                    hours: [10, 21],
                    phone: '010010010',
                    address: '강남구 101-101',
                    services: [
                        {
                            name: '기본',
                            price: 15000,
                            duration: 0.5
                        },
                        {
                            name: '젤 원컬러',
                            price: 17000,
                            duration: 1.5
                        },
                        {
                            name: '젤 투컬러',
                            price: 20000,
                            duration: 2 
                        }
                    ],
                    schedules: [
                        {
                         date: new Date(),
                         slots: [
                              {
                                   time: 12.5,
                                   fullyBooked: true, //if > employee true,
                                   bookedServices: [
                                        {
                                           name: '원톤 베이직',
                                           price: 19000,
                                           duration: 1.5,
                                           username: 'user101',
                                           start: true,
                                           end: false
                                        },
                                        {
                                           name: '투톤 베이직',
                                           price: 21000,
                                           duration: 2,
                                           username: 'user202',
                                           start: false,
                                           end: false
                                        },
                                        {
                                           name: '그라데이션',
                                           price: 23000,
                                           duration: 2.5, 
                                           username: 'user303', 
                                           start: false,
                                           end: true
                                        }
                                   ],
                                   numberOfBooks: 3 //bookedServices.length,
                              }
                         ]
                        }
                    ],


                    latitude: 37.5691469,
                    longitude: 126.978647,
                    description: '네일샵에 오신것을 환영합니다 101'
                };

                deferred.resolve(response);
                return deferred.promise;
            } /// MOCK END ////
        } /// queryById END ///

    };

    return ScheduleModel;

}])
myApp
    .controller('ShowController', [

        'ShowModel', 'Posts', '$state', '$ionicModal', '$scope', 'ShowListModel',
        '$cordovaCamera', 'Message', '$timeout',

        function(ShowModel, Posts, $state, $ionicModal, $scope, ShowListModel,
            $cordovaCamera, Message, $timeout
        ) {

            var Show = this;

            $ionicModal.fromTemplateUrl('state/show/showModal.html', {
                scope: $scope,
                animation: 'slide-in-up'
            }).then(function(modal) {
                Show.modal = modal;
            });

            Show.modalHideHandler = function() {
                Show.writeImageSrc = null;
                Show.writeTitle = null;
                Show.writeContent = null;
                Show.modal.hide();
            };

            Show.modalShowHandler = function() {
                Show.modal.show();
            };

            Show.goToSavedPostListHandler = function() {
                $state.go('main.show.savedList');
            };

            //------------------------
            //  Write post logic
            //------------------------
            Show.showWriteImage = function() {
                return Show.writeImageSrc != null;
            };

            Show.getPictureHandler = function(sourceType) {

                // photoLibrary: 0,
                // camera: 1

                if (sourceType === undefined) {
                    sourceType = 1;
                }

                console.log(sourceType);
                var options = {
                    quality: 50,
                    destinationType: Camera.DestinationType.FILE_URI,
                    allowEdit: true,
                    encodingType: Camera.EncodingType.JPEG, // PNG do not work
                    correctOrientation: true,
                    targetWidth: 500,
                    mediaType: Camera.MediaType.PICTURE,
                    saveToPhotoAlbum: true,
                    cameraDirection: Camera.Direction.BACK, // FRONT do not work
                    sourceType: sourceType
                };

                $cordovaCamera.getPicture(options)
                    .then(function success(imageData) {
                        Show.writeImageSrc = imageData;
                        console.log(Show.writeImageSrc);
                    }, function error(err) {
                        console.log(err);
                    });

            };



            Show.postHandler = function() {
                Message.loading.default();

                var postWithFile = {
                    category: 'SHOW-POST',
                    title: Show.writeTitle,
                    content: Show.writeContent,
                    file: Show.writeImageSrc
                };

                Posts.createPostWithImage({}, postWithFile).$promise
                    .then(function success() {
                        Show.writeTitle = '';
                        Show.writeContent = '';
                        Show.writeImageSrc = '';
                        Message.loading.hide();
                        Message.message.success('포스트가 만들어졌습니다.');
                        Show.modal.hide();
                        $timeout(function() {
                            $state.go('main.show.list', {}, {
                                reload: true
                            });
                        }, 1500);
                    }, function error() {
                        Message.loading.hide();
                        Message.message.error('다시 시도해주세요.');
                    }, function progress(prog) {
                        console.dir(prog);
                    });
            };



            // END

        }
    ]);

myApp
    .factory('ShowModel', [
        '$http', 'governorUrl',
        function($http, governorUrl) {

            var ShowModel = {
                //------------------------
                //  post to server, then update again with image.
                //------------------------
                postHandler: function(post) {
                    $http({
                        url: governorUrl + '/post',
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        data: post
                    }).then(function success(response) {
                        console.log(response);
                    }, function err(error) {
                        console.log(error);
                    })
                }

            };

            return ShowModel;

        }
    ]);

myApp
    .controller('EventDetailController', [

        'EventDetailModel', 'Posts', 'Message', '$stateParams', '$scope',

        function(EventDetailModel, Posts, Message, $stateParams, $scope) {

            var EventDetail = this;

            EventDetail.Model = EventDetailModel;

            $scope.$on('$ionicView.beforeEnter', function() {
                Message.loading.default();
                Posts.get({
                    id: $stateParams.id
                }).$promise
                    .then(function success(data) {
                        console.log(JSON.stringify(data, null, 2));
                        EventDetailModel.post = data;
                        Message.loading.hide();

                    }, function error(err) {
                        Message.popUp.alert.default('이벤트 알림', '종료된 이벤트입니다.');
                    });
            });




        } //END
    ]);

myApp
    .factory('EventDetailModel', [



        function() {

            var EventDetailModel = {

                post: {
                    id: '',
                    comments: [],
                    photos: [{
                        url: ''
                    }],
                    content: '',
                    title: '',
                    category: 'SHOW-POST',
                    createdBy: {
                        nickname: ''
                    }
                }
            };

            return EventDetailModel;

        }
    ]);

myApp
    .controller('EventListController', [

        'EventListModel', 'Posts', '$state', '$scope', 'Message',

        function(EventListModel, Posts, $state, $scope, Message) {

            var EventList = this;

            EventList.Model = EventListModel;


            $scope.$on('$ionicView.beforeEnter', function() {
                if (EventListModel.postsWrapper.posts.length < 10) {
                    Message.loading.default();

                    Posts.getPosts({
                        category: 'EVENT-POST',
                        sort: 'id DESC',
                        limit: 10
                    }).$promise
                        .then(function success(data) {
                            EventListModel.postsWrapper = data;
                            console.log(data);
                            Message.loading.hide();
                        }, function error(err) {
                            Message.popUp.alert.default();
                        });
                }
            });

            EventList.goToDetailHandler = function(post) {
                $state.go('main.announcements.eventDetail', {
                    id: post.id
                })
            };
            //------------------------
            // Check for newer stuff;
            //------------------------
            EventList.getNewerPosts = function() {
                var currentPosts = EventListModel.postsWrapper.posts;
                Posts.getPosts({
                    category: 'EVENT-POST',
                    limit: 10,
                    newerThan: currentPosts[0].id
                }).$promise
                    .then(function success(data) {
                        if (!data.posts.length) {
                            Message.popUp.alert.default(
                                '이벤트 알림',
                                '새로운 이벤트가 없습니다.'
                            );
                        }
                        data.posts.forEach(function(post, i, self) {
                            currentPosts.unshift(post);
                        })
                        $scope.$broadcast('scroll.refreshComplete');
                    }, function error(err) {
                        Message.popUp.alert.default();
                        $scope.$broadcast('scroll.refreshComplete');
                    })
            }
            //------------------------
            //  Check for older stuff
            //------------------------
            EventList.getOlderPosts = function() {
                var currentPosts = EventListModel.postsWrapper.posts;
                Posts.getPosts({
                    category: 'EVENT-POST',
                    sort: 'id DESC',
                    limit: 10,
                    olderThan: currentPosts[currentPosts.length - 1].id
                }).$promise
                    .then(function success(data) {
                        data.posts.forEach(function(post, i, self) {
                            currentPosts.push(post);
                        })
                        $scope.$broadcast('scroll.infiniteScrollComplete');
                        EventListModel.postsWrapper.more = data.more;
                    }, function error(err) {
                        Message.popUp.alert.default();
                        $scope.$broadcast('scroll.infiniteScrollComplete');
                    });
            };
            // Check if there is more data if none infinite-scroll is disabled.;
            EventList.checkForMore = function() {
                return EventListModel.postsWrapper.more;
            };









        }
    ]);

myApp
    .factory('EventListModel', [



        function() {
            var EventListModel = {
                postsWrapper: {
                    posts: [{
                        title: '',
                        content: '',
                        category: '',
                        comments: [],
                        photos: [{
                            url: ''
                        }]
                    }],
                    more: true
                }
            }

            return EventListModel;
        }
    ]);

myApp
    .controller('NoticeDetailController', [

        'NoticeDetailModel', 'Posts', '$stateParams', '$scope', 'Message',


        function(NoticeDetailModel, Posts, $stateParams, $scope, Message) {

            var NoticeDetail = this;

            NoticeDetail.Model = NoticeDetailModel;

            $scope.$on('$ionicView.beforeEnter', function() {

                //------------------------
                //  Load post with id
                //------------------------
                Message.loading.default();
                Posts.findById({
                    id: $stateParams.id
                }).$promise
                    .then(function success(data) {
                        console.log(JSON.stringify(data, null, 2));
                        NoticeDetailModel.post = data;
                        Message.loading.hide();

                    }, function error(err) {
                        Message.popUp.alert.default('해당포스트가 없습니다', '지워진 포스트이거나 인터넷이 꺼져있습니다.');
                    });
            });

        }
    ]);

myApp
    .factory('NoticeDetailModel', [



        function() {

            var NoticeDetailModel = {
                post: {
                    id: '',
                    comments: [],
                    photos: [{
                        url: ''
                    }],
                    content: '',
                    title: '',
                    category: 'SHOW-POST',
                    createdBy: {
                        nickname: ''
                    }
                }
            };

            return NoticeDetailModel;


        }
    ]);

myApp
    .controller('NoticeListController', [

        'NoticeListModel', 'Posts', '$state', '$scope', 'Message',

        function(NoticeListModel, Posts, $state, $scope, Message) {

            var NoticeList = this;

            NoticeList.Model = NoticeListModel;

            $scope.$on('$ionicView.beforeEnter', function() {
                if (NoticeListModel.postsWrapper.posts.length < 10) {
                    Message.loading.default();

                    Posts.getPosts({
                        category: 'NOTICE-POST',
                        sort: 'id DESC',
                        limit: 10
                    }).$promise
                        .then(function success(data) {
                            NoticeListModel.postsWrapper = data;
                            Message.loading.hide();
                        }, function error(err) {
                            Message.popUp.alert.default();
                        });
                }
            });

            NoticeList.goToDetailHandler = function(post) {
                $state.go('main.announcements.noticeDetail', {
                    id: post.id
                });
            };
            //------------------------
            // Check for newer stuff;
            //------------------------
            NoticeList.getNewerPosts = function() {
                var currentPosts = NoticeListModel.postsWrapper.posts;
                Posts.getPosts({
                    category: 'NOTICE-POST',
                    limit: 10,
                    newerThan: currentPosts[0].id
                }).$promise
                    .then(function success(data) {
                        if (!data.posts.length) {
                            Message.popUp.alert.default(
                                '공지사항 알림',
                                '새로운 공지사항이 없습니다.'
                            );
                        }
                        data.posts.forEach(function(post, i, self) {
                            currentPosts.unshift(post);
                        });
                        $scope.$broadcast('scroll.refreshComplete');
                    }, function error(err) {
                        Message.popUp.alert.default();
                        $scope.$broadcast('scroll.refreshComplete');
                    });
            };
            //------------------------
            //  Check for older stuff
            //------------------------
            NoticeList.getOlderPosts = function() {
                var currentPosts = NoticeListModel.postsWrapper.posts;
                Posts.getPosts({
                    category: 'NOTICE-POST',
                    sort: 'id DESC',
                    limit: 10,
                    olderThan: currentPosts[currentPosts.length - 1].id
                }).$promise
                    .then(function success(data) {
                        data.posts.forEach(function(post, i, self) {
                            currentPosts.push(post);
                        });
                        $scope.$broadcast('scroll.infiniteScrollComplete');
                        NoticeListModel.postsWrapper.more = data.more;
                    }, function error(err) {
                        Message.popUp.alert.default();
                        $scope.$broadcast('scroll.infiniteScrollComplete');
                    });
            };
            // Check if there is more data if none infinite-scroll is disabled.;
            NoticeList.checkForMore = function() {
                return NoticeListModel.postsWrapper.more;
            };

        }
    ]);

myApp
    .factory('NoticeListModel', [



        function() {

            var NoticeListModel = {
                postsWrapper: {
                    posts: [{
                        title: '',
                        content: '',
                        category: '',
                        comments: [],
                        photos: [{
                            url: ''
                        }]
                    }],
                    more: true
                }
            };

            return NoticeListModel;

        }
    ]);

myApp
    .controller('BalanceDetailController', [



        function() {

        }
    ]);


myApp
    .controller('BalanceListController', [

        'BalanceListModel',

        function(BalanceListModel) {

            var BalanceList = this;

            BalanceList.places = BalanceListModel.places;

        }
    ]);

myApp
    .factory('BalanceListModel', [



        function() {

            var BalanceListModel = {
                places: [{
                    id: '222aaa',
                    longitude: 12.121212,
                    latitude: 155.13131,
                    title: '우리 네일',
                    titlePhoto: 'http://placehold.it/500x500',
                    address: 'address 2'
                }, {
                    id: 'asdfa1111',
                    longitude: 12.121212,
                    latitude: 155.13131,
                    title: '우리 네일2',
                    titlePhoto: 'http://placehold.it/500x500',
                    address: 'address 2'
                }]
            };


            return BalanceListModel;
        }
    ]);

myApp
    .controller('ShowDetailController', [

        'ShowDetailModel', 'Posts', 'Comments', '$stateParams', '$scope',
        'Message',

        function(ShowDetailModel, Posts, Comments, $stateParams, $scope,
            Message
        ) {

            var ShowDetail = this;

            ShowDetail.Model = ShowDetailModel;

            $scope.$on('$ionicView.beforeEnter', function() {

                //------------------------
                //  Style Star
                //------------------------
                var postsString = localStorage.getItem('NAIL_SAVED_POSTS');
                var postsArray = angular.fromJson(postsString) || [];
                postsArray.forEach(function(post, i, self) {
                    if (post.id === $stateParams.id) {
                        ShowDetail.styleStar = true;
                    }
                });
                Message.loading.default();
                Posts.get({
                    id: $stateParams.id
                }).$promise
                    .then(function success(data) {
                        console.log(JSON.stringify(data, null, 2));
                        ShowDetailModel.post = data;
                        Message.loading.hide();

                    }, function error(err) {
                        Message.popUp.alert.default('해당포스트가 없습니다', '지워진 포스트이거나 인터넷이 꺼져있습니다.');
                    });
            });

            ShowDetail.toggleSavePost = function() {
                // get NAIL_SAVED_POSTS from localStorage
                var postsString = localStorage.getItem('NAIL_SAVED_POSTS');
                // make it object using angular.fromJson
                var postsArray = angular.fromJson(postsString);
                // if null create array
                if (!Array.isArray(postsArray)) {
                    postsArray = [];
                }
                // check whether post already exist
                for (var i = 0; i < postsArray.length; i++) {
                    var post = postsArray[i];
                    console.log(post.id);
                    console.log($stateParams.id);
                    // if exists delete saved post
                    if (post.id === $stateParams.id) {
                        postsArray.splice(i, 1);
                        postsString = angular.toJson(postsArray);
                        localStorage.setItem('NAIL_SAVED_POSTS', postsString);
                        // style star
                        ShowDetail.styleStar = false;
                        Message.popUp.alert.default('담아두기 알림', '담아두기에서 삭제되었습니다.');
                        return false;
                    }
                }
                // if not save current posts necessary attributes(savedList)
                var currentPost = ShowDetailModel.post;
                var postToSave = {
                    id: currentPost.id,
                    title: currentPost.title,
                    createdBy: currentPost.createdBy,
                    photos: [{
                        url: currentPost.photos[0] && currentPost.photos[0].url
                    }],
                    likeCount: currentPost.likeCount,
                    commentCount: currentPost.comments.length
                };
                postsArray.push(postToSave);
                // convert to json, save to NAIL_SAVED_POSTS
                postsString = angular.toJson(postsArray);
                localStorage.setItem('NAIL_SAVED_POSTS', postsString);
                // style right button star icon to indicate saved sate
                ShowDetail.styleStar = true;
                Message.popUp.alert.default('담아두기 알림', '포스트를 담아두었습니다.');
            };

            ShowDetail.addComment = function(comment) {
                commentBody = {
                    content: comment,
                    post: $stateParams.id
                };
                Comments.addCommentToPost({}, commentBody).$promise
                    .then(function success(data) {
                        Message.popUp.alert.default('댓글달기 알림', '댓글이 성공적으로 달렸습니다.');
                        ShowDetailModel.post.comments.unshift(data);
                        console.log(data);

                    }, function error(err) {
                        Message.popUp.alert.default('댓글달기 알림', '인터넷이 꺼져있습니다.');
                    });
            };

        } //END
    ]);

myApp
    .factory('ShowDetailModel', [

        function() {

            var ShowDetailModel = {
                post: {
                    id: '',
                    comments: [],
                    photos: [{
                        url: ''
                    }],
                    content: '',
                    title: '',
                    category: 'SHOW-POST',
                    createdBy: {
                        nickname: ''
                    }
                }
            };

            return ShowDetailModel;

        }
    ]);

myApp
    .controller('SavedShowListController', [

        'SavedShowListModel', '$state', '$scope',

        function(SavedShowListModel, $state, $scope) {

            var SavedShowList = this;

            SavedShowList.Model = SavedShowListModel;
            $scope.$on('$ionicView.beforeEnter', function() {
                SavedShowListModel.posts =
                    angular.fromJson(localStorage.getItem('NAIL_SAVED_POSTS'));
            })




            SavedShowList.goToDetailHandler = function(post) {
                $state.go('main.show.detail', {
                    id: post.id
                });
                //MVP2: resave. likeCounts, and commentCounts.
            };

            var savedList = [{
                id: '',
                titile: '',
                createdBy: {
                    nickname: ''
                },
                photos: [],
                // Check if updated
                likeCount: '',
                commentCount: ''
            }];
        }
    ]);

myApp
    .factory('SavedShowListModel', [

        function() {

            var SavedShowListModel = {

            };

            return SavedShowListModel;

        }
    ]);

myApp
    .controller('ShowListController', [

        'ShowListModel', 'Posts', '$state', '$scope',
        'Message',

        function(ShowListModel, Posts, $state, $scope,
            Message
        ) {

            var ShowList = this;

            ShowList.Model = ShowListModel;


            $scope.$on('$ionicView.beforeEnter', function() {
                if (ShowListModel.postsWrapper.posts.length < 10) {
                    Message.loading.default();

                    Posts.getPosts({
                        category: 'SHOW-POST',
                        sort: 'id DESC',
                        limit: 10
                    }).$promise
                        .then(function success(data) {
                            ShowListModel.postsWrapper = data;
                            Message.loading.hide();
                        }, function error(err) {
                            Message.popUp.alert.default();
                        });
                }
            });

            ShowList.goToDetailHandler = function(post) {
                $state.go('main.show.detail', {
                    id: post.id
                });
            };
            //------------------------
            // Check for newer stuff;
            //------------------------
            ShowList.getNewerPosts = function() {
                var currentPosts = ShowListModel.postsWrapper.posts;
                Posts.getPosts({
                    category: 'SHOW-POST',
                    limit: 10,
                    newerThan: currentPosts[0].id
                }).$promise
                    .then(function success(data) {
                        if (!data.posts.length) {
                            Message.popUp.alert.default(
                                '새로운포스트가 없습니다',
                                '나중에 다시 확인해주세요'
                            );
                        }
                        data.posts.forEach(function(post, i, self) {
                            currentPosts.unshift(post);
                        })
                        $scope.$broadcast('scroll.refreshComplete');
                    }, function error(err) {
                        Message.popUp.alert.default();
                        $scope.$broadcast('scroll.refreshComplete');
                    })
            }
            //------------------------
            //  Check for older stuff
            //------------------------
            ShowList.getOlderPosts = function() {
                var currentPosts = ShowListModel.postsWrapper.posts;
                Posts.getPosts({
                    category: 'SHOW-POST',
                    sort: 'id DESC',
                    limit: 10,
                    olderThan: currentPosts[currentPosts.length - 1].id
                }).$promise
                    .then(function success(data) {
                        data.posts.forEach(function(post, i, self) {
                            currentPosts.push(post);
                        })
                        $scope.$broadcast('scroll.infiniteScrollComplete');
                        ShowListModel.postsWrapper.more = data.more;
                    }, function error(err) {
                        Message.popUp.alert.default();
                        $scope.$broadcast('scroll.infiniteScrollComplete');
                    });
            };
            // Check if there is more data if none infinite-scroll is disabled.;
            ShowList.checkForMore = function() {
                return ShowListModel.postsWrapper.more;
            };

        }
    ]);

myApp
    .factory('ShowListModel', [

        function() {

            var ShowListModel = {
                postsWrapper: {
                    posts: [{
                        title: '',
                        content: '',
                        category: '',
                        comments: [],
                        photos: [{
                            url: ''
                        }]
                    }],
                    more: true
                },


                // posts: [{
                //         id: 0,
                //         titlePhoto: {
                //             url: 'http://http://placehold.it/500x500',
                //             resource_type: 'titlePhoto'
                //         },
                //         title: 'title number 1',
                //         createdBy: 'user101',
                //         likeCount: 11,
                //         commentCount: 11,
                //         category: 'show' || 'event' || 'announcement',
                //         summary: '80 characters long',
                //         createdAt: new Date()
                //     }, {
                //         id: 1,
                //         titlePhoto: {
                //             url: 'http://http://placehold.it/500x500',
                //             resource_type: 'titlePhoto'
                //         },
                //         title: 'title number 2',
                //         createdBy: 'user102',
                //         likeCount: 22,
                //         commentCount: 22,
                //         category: 'show' || 'event' || 'announcement',
                //         summary: '80 characters long',
                //         createdAt: new Date()
                //     }, {
                //         id: 2,
                //         titlePhoto: {
                //             url: 'http://http://placehold.it/500x500',
                //             resource_type: 'titlePhoto'
                //         },
                //         title: 'title number 2',
                //         createdBy: 'user102',
                //         likeCount: 22,
                //         commentCount: 22,
                //         category: 'show' || 'event' || 'announcement',
                //         summary: '80 characters long',
                //         createdAt: new Date()
                //     }, {
                //         id: 3,
                //         titlePhoto: {
                //             url: 'http://http://placehold.it/500x500',
                //             resource_type: 'titlePhoto'
                //         },
                //         title: 'title number 2',
                //         createdBy: 'user102',
                //         likeCount: 22,
                //         commentCount: 22,
                //         category: 'show' || 'event' || 'announcement',
                //         summary: '80 characters long',
                //         createdAt: new Date()
                //     },

                // ]
            };

            return ShowListModel;

        }
    ]);
